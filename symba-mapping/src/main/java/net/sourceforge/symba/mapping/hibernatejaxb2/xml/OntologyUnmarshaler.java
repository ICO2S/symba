package net.sourceforge.symba.mapping.hibernatejaxb2.xml;

import net.sourceforge.symba.mapping.hibernatejaxb2.helper.OntologyCollectionMappingHelper;
import net.sourceforge.fuge.ServiceLocator;
import net.sourceforge.fuge.service.EntityService;
import net.sourceforge.fuge.collection.OntologyCollection;
import net.sourceforge.fuge.util.generatedJAXB2.FuGECollectionOntologyCollectionType;

import javax.xml.bind.JAXBException;
import javax.xml.bind.JAXBContext;
import javax.xml.bind.Unmarshaller;
import javax.xml.bind.JAXBElement;
import java.io.FileNotFoundException;
import java.io.FileInputStream;
import java.net.URISyntaxException;

/**
 * This file is part of SyMBA.
 * SyMBA is covered under the GNU Lesser General Public License (LGPL).
 * Copyright (C) 2007 jointly held by Allyson Lister, Olly Shaw, and their employers.
 * To view the full licensing information for this software and ALL other files contained
 * in this distribution, please see LICENSE.txt
 *
 * This class will load all of the contents of an OntologyCollection (e.g. that generated by
 * net.sourceforge.symba.obiloader.examples.CreateFuGEOntologyCollection) into the database, for later use
 * by SyMBA templates.
 *
 * $LastChangedDate$
 * $LastChangedRevision$
 * $Author$
 * $HeadURL: https://symba.svn.sourceforge.net/svnroot/symba/trunk/symba-backend/src/main/java/net/sourceforge/symba/util/conversion/xml/OntologyUnmarshaler.java $
 *
 */
public class OntologyUnmarshaler {
    private final String XMLFilename;
    private final EntityService entityService;

    public OntologyUnmarshaler( String inputXML ) {
        ServiceLocator serviceLocator = ServiceLocator.instance();
        this.entityService = serviceLocator.getEntityService();
        this.XMLFilename = inputXML;
    }

    public void Jaxb2ToFuGE() throws JAXBException, FileNotFoundException, URISyntaxException {

        // create a JAXBContext capable of handling classes generated into
        // the fugeOM.util.generatedJAXB2 package
        JAXBContext jc = JAXBContext.newInstance( "fugeOM.util.generatedJAXB2" );

        // create an Unmarshaller
        Unmarshaller u = jc.createUnmarshaller();

        // unmarshal JUST what is normally available within an OntologyCollection
        JAXBElement<?> genericTopLevelElement = ( JAXBElement<?> ) u.unmarshal( new FileInputStream( XMLFilename ) );

        // Get the OntologyCollection root object. REMEMBER that we will not be loading the Collection, JUST its contents.
        FuGECollectionOntologyCollectionType collectionType = ( FuGECollectionOntologyCollectionType ) genericTopLevelElement
                .getValue();

        // get and store all information in the database
        OntologyCollectionMappingHelper helper = new OntologyCollectionMappingHelper();

        // unmarshall the jaxb object without loading the collection into the database
        OntologyCollection ontologyCollection = ( OntologyCollection ) entityService
                .createDescribable( "fugeOM.Collection.OntologyCollection" );
        helper.unmarshalCollectionContents( collectionType, ontologyCollection, null );
    }

}
