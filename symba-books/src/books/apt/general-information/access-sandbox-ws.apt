 ---
 Accessing the SyMBA Sandbox Web Services
 ---
 Allyson Lister
 ---
 May 2008

Structure of the SyMBA Web Services

  There are four SyMBA modules dealing with WS. The separation of a relatively small number of classes into a
  relatively large number of Maven modules allows for greater flexibility and simpler installation and use of the
  WS.
  * <<symba-lsid-ws-api>>. The API provides the Java interfaces that must be implemented if you wish to create your
    own version of the SyMBA WS. It is these classes that are annotated with the JAXB and CXF Java annotations, and
    it is from these classes that the WS files are auto-generated by CXF where necessary. Within this module
    are interfaces for LSID assigning (LsidAssigner.java), LSID service checking (LsidResolver.java), Lsid Data
    and Metadata Retrieval (LsidDataRetriever.java),
  * <<symba-lsid-ws-assigner>>.
  * <<symba-lsid-ws-api-resolver>>.
  * <<symba-lsid-ws-api-client>>.
  []


Accessing the SyMBA Sandbox Web Services

* LsidAssigner

  * <<assignLSID()>>. The LsidAssigner webservice contains a single method, assignLSID(), which returns an
    auto-generated LSID based on a namespace you specify. There is a sandbox installation of this webservice
    running on {{{http://bsu.ncl.ac.uk:8081/symba-lsid-ws-assigner/services/LsidAssigner?wsdl}}}. There are two examples
    of how to use this webservice.
      * <<Via a Java client class.>> You can examine and use the
        net.sourceforge.symba.lsid.webservices.client.LsidAssignerClient to connect to any running installation
        of the symba-lsid-ws-assigner module of the SyMBA project. You specify which WS you wish to connect to by
        modifying the <<<address>>> property of the <<<clientAssignerFactory>>> bean. The value of the address property,
        as it is checked-out from SyMBA subversion, is the value required to connect to the SyMBA sandbox WS
        installation.
      * <<Via Taverna.>> Within the symba-lsid-ws-client/src/main/resource/taverna-workflows directory, you'll find some
        example Taverna workflows that connect to working WS running on the SyMBA sandbox server. Load these files
        up in Taverna, and you'll be able to connect SyMBA WS to your own Taverna workflows, or even run them on their
        own.


* LsidResolver

    * <<getAvailableServices()>>. Check that the available web services can deal with your LSID.

* LsidDataRetriever

    * <<getMetadata()>>. Get some information about an LSID.
    * <<getData()>>. Get the data pointed to from an LSID.
