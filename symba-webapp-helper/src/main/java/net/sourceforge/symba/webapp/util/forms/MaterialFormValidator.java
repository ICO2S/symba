package net.sourceforge.symba.webapp.util.forms;

import net.sourceforge.symba.webapp.util.DatafileSpecificMetadataStore;
import net.sourceforge.symba.webapp.util.GenericProtocolApplicationSummary;
import net.sourceforge.symba.webapp.util.MaterialFactorsStore;
import net.sourceforge.symba.webapp.util.SymbaFormSessionBean;
import net.sourceforge.symba.webapp.util.forms.schemes.BasicScheme;
import net.sourceforge.symba.webapp.util.forms.schemes.material.*;
import net.sourceforge.symba.webapp.util.forms.schemes.protocol.ActionHierarchyScheme;

import javax.servlet.http.HttpServletRequest;
import java.util.Enumeration;
import java.util.LinkedHashSet;

/**
 * This file is part of SyMBA.
 * SyMBA is covered under the GNU Lesser General Public License (LGPL).
 * Copyright (C) 2007 jointly held by Allyson Lister, Olly Shaw, and their employers.
 * To view the full licensing information for this software and ALL other files contained
 * in this distribution, please see LICENSE.txt
 * <p/>
 * $LastChangedDate$
 * $LastChangedRevision$
 * $Author$
 * $HeadURL$
 */
public class MaterialFormValidator {

    // will validate the material information from a form generated by MaterialTemplateParser and using
    // the MaterialFormScheme classes.
    public static SymbaFormSessionBean validate( HttpServletRequest request,
                                                 SymbaFormSessionBean symbaFormSessionBean,
                                                 String toBeIgnoredParameterName,
                                                 boolean isPartOfDataFileForm ) {

        Enumeration enumeration = request.getParameterNames();

        // assume until discover otherwise that the material characteristics are complete
        symbaFormSessionBean.setMaterialCharacteristicsIncomplete( false );

        // create instances of all of the schemes we'll use
        OntologyReplacementScheme ontologyReplacementScheme = new OntologyReplacementScheme();
        MaterialNameScheme materialNameScheme = new MaterialNameScheme();
        TreatmentScheme treatmentScheme = new TreatmentScheme();
        MaterialTypeScheme materialTypeScheme = new MaterialTypeScheme();
        CharacteristicScheme characteristicScheme = new CharacteristicScheme();
        CharacteristicScheme novelCharacteristicScheme = new CharacteristicScheme();
        novelCharacteristicScheme.setNovel( true );
        ActionHierarchyScheme ahs = new ActionHierarchyScheme();
        ActionHierarchyScheme dummyAhs = new ActionHierarchyScheme();
        dummyAhs.setDummy( true );

        while ( enumeration.hasMoreElements() ) {

            String parameterName = ( String ) enumeration.nextElement();

            if ( parameterName.equals( ahs.getElementTitle() ) || parameterName.equals( dummyAhs.getElementTitle() ) ) {
                // this parameter is only used within material transformation forms and not assay forms
                // As it is such a simple parameter, we don't use getMfs.
                symbaFormSessionBean.setSpecimenActionHierarchy( request.getParameter( parameterName ) );

            } else if ( parameterName.startsWith( ontologyReplacementScheme.getElementTitle() ) &&
                        !parameterName.equals( toBeIgnoredParameterName ) ) {

                ontologyReplacementScheme.parse( parameterName );
                MaterialFactorsStore mfs =
                        getMfs( symbaFormSessionBean, isPartOfDataFileForm, ontologyReplacementScheme );
                mfs.putOntologyReplacementsPair( ontologyReplacementScheme.getTitleOfReplacement(),
                        request.getParameter( parameterName ) );
                symbaFormSessionBean =
                        setMfs( symbaFormSessionBean, isPartOfDataFileForm, ontologyReplacementScheme, mfs );

            } else if ( parameterName.startsWith( materialNameScheme.getElementTitle() ) ) {
                if ( request.getParameter( parameterName ) != null &&
                     request.getParameter( parameterName ).length() > 0 &&
                     !parameterName.equals( toBeIgnoredParameterName ) ) {

                    materialNameScheme.parse( parameterName );
                    MaterialFactorsStore mfs = getMfs( symbaFormSessionBean, isPartOfDataFileForm, materialNameScheme );
                    mfs.setMaterialName( request.getParameter( parameterName ) );
                    symbaFormSessionBean =
                            setMfs( symbaFormSessionBean, isPartOfDataFileForm, materialNameScheme, mfs );

                }
            } else if ( parameterName.startsWith( treatmentScheme.getElementTitle() ) &&
                        request.getParameter( parameterName ).length() > 0 &&
                        !parameterName.equals( toBeIgnoredParameterName ) ) {

                // will generate new array each time (unless there are *no* treatments at all,
                // to prevent old choices from being copied multiple times into the array.

                treatmentScheme.parse( parameterName );
                MaterialFactorsStore mfs = getMfs( symbaFormSessionBean, isPartOfDataFileForm, treatmentScheme );
                mfs.addTreatmentInfo( request.getParameter( parameterName ) );
                symbaFormSessionBean = setMfs( symbaFormSessionBean, isPartOfDataFileForm, treatmentScheme, mfs );

            } else if ( parameterName.startsWith( materialTypeScheme.getElementTitle() ) &&
                        !parameterName.equals( toBeIgnoredParameterName ) ) {

                materialTypeScheme.parse( parameterName );
                MaterialFactorsStore mfs = getMfs( symbaFormSessionBean, isPartOfDataFileForm, materialTypeScheme );
                mfs.setMaterialType( request.getParameter( parameterName ) );
                symbaFormSessionBean = setMfs( symbaFormSessionBean, isPartOfDataFileForm, materialTypeScheme, mfs );

            } else if ( ( parameterName.startsWith( characteristicScheme.getElementTitle() ) ||
                          parameterName.startsWith( novelCharacteristicScheme.getElementTitle() ) ) &&
                                                                                                    !parameterName
                                                                                                            .equals(
                                                                                                                    toBeIgnoredParameterName ) ) {
                // each characteristic cannot be empty (except a new one was created and it will redirect directly to metaData.jsp),
                // and might be multiple selections, which will be separated by commas
                if ( request.getParameter( parameterName ) == null ||
                     request.getParameter( parameterName ).length() == 0 ) {
                    symbaFormSessionBean.setMaterialCharacteristicsIncomplete( true );
                } else {

                    // once inside this section, no need to use the two versions of the scheme: the characteristicScheme
                    // "novel" value will get set appropriately.

                    characteristicScheme.parse( parameterName );

                    boolean multipleAllowed = false;
                    if ( parameterName.startsWith( characteristicScheme.getMultipleElementTitle() ) ) {
                        multipleAllowed = true;
                    }

                    MaterialFactorsStore mfs =
                            getMfs( symbaFormSessionBean, isPartOfDataFileForm, characteristicScheme );

                    if ( characteristicScheme.isNovel() ) {
                        mfs.setDescriptorOiEndurant( characteristicScheme.getDescriptorOiEndurant() );
                    }

                    mfs = parseFormCharacteristics( request.getParameterValues( parameterName ), mfs, multipleAllowed,
                            characteristicScheme.isNovel() );

                    symbaFormSessionBean =
                            setMfs( symbaFormSessionBean, isPartOfDataFileForm, characteristicScheme, mfs );

                    // reset characteristicScheme for the next parameter
                    characteristicScheme.setNovel( false );
                }
            } else {
            }
        }
        return symbaFormSessionBean;
    }

    private static MaterialFactorsStore parseFormCharacteristics( String[] parameterValues,
                                                                  MaterialFactorsStore mfs,
                                                                  boolean multipleAllowed, boolean isNovel ) {
        for ( String singleParameter : parameterValues ) {
            String[] parsedStrings = singleParameter.split( "::" );
            String ontologySourceEndurantID = parsedStrings[0];

            String toSearch = parsedStrings[1];
            if ( isNovel ) {
                toSearch = parsedStrings[1] + "::" + parsedStrings[2];
            }
            if ( multipleAllowed ) {
                LinkedHashSet<String> tmp = mfs.getMultipleCharacteristics().get( ontologySourceEndurantID );
                if ( isNovel ) {
                    tmp = mfs.getNovelMultipleCharacteristics().get( ontologySourceEndurantID );
                }
                if ( tmp == null ) {
                    tmp = new LinkedHashSet<String>();
                }
                if ( !tmp.contains( toSearch ) ) {
                    tmp.add( toSearch );
                }
                if ( isNovel ) {
                    mfs.addNovelMultipleCharacteristics( ontologySourceEndurantID, tmp );
                } else {
                    mfs.addMultipleCharacteristics( ontologySourceEndurantID, tmp );
                }
            } else {
                if ( isNovel ) {
                    mfs.addNovelCharacteristic( ontologySourceEndurantID, toSearch );
                } else {
                    mfs.addCharacteristic( ontologySourceEndurantID, toSearch );
                }
            }
        }
        return mfs;
    }

    private static SymbaFormSessionBean setMfs( SymbaFormSessionBean symbaFormSessionBean,
                                                boolean isPartOfDataFileForm,
                                                BasicScheme scheme, MaterialFactorsStore mfs ) {
        if ( isPartOfDataFileForm ) {
            GenericProtocolApplicationSummary summary = symbaFormSessionBean.getDatafileSpecificMetadataStores()
                    .get( scheme.getDatafileNumber() ).getGenericProtocolApplicationInfo()
                    .get( scheme.getParentOfGpaEndurant() );
            summary.setInputCompleteMaterialFactor( mfs, scheme.getMaterialCount() );
            symbaFormSessionBean.getDatafileSpecificMetadataStores().get( scheme.getDatafileNumber() )
                    .putGenericProtocolApplicationInfoValue( scheme.getParentOfGpaEndurant(), summary );
        } else {
            symbaFormSessionBean.setSpecimenToBeUploaded( mfs );
        }
        return symbaFormSessionBean;
    }

    private static MaterialFactorsStore getMfs( SymbaFormSessionBean symbaFormSessionBean,
                                                boolean isPartOfDataFileForm, BasicScheme scheme ) {
        // take what is already there, and add only those fields that have not been made yet

        if ( isPartOfDataFileForm ) {

            DatafileSpecificMetadataStore temp =
                    symbaFormSessionBean.getDatafileSpecificMetadataStores().get( scheme.getDatafileNumber() );
            return temp.getGenericProtocolApplicationInfo().get( scheme.getParentOfGpaEndurant() )
                    .getInputCompleteMaterialFactors().get( scheme.getMaterialCount() );

        } else {
            return symbaFormSessionBean.getSpecimenToBeUploaded();
        }
    }


}